// Generated by CoffeeScript 1.6.2
(function() {
  var a, answers, d, decimal2fraction, i, j, l1, l2, n, nd, pattern, patterns, r1, r2, x, y, yakubun, _i, _j, _len, _len1,
    _this = this;

  decimal2fraction = function(decimal) {
    var denominator, exponent, i, numerator;

    exponent = /^-?\d+\.(\d+)0*$/.exec(decimal).toString()[1].length;
    denominator = Math.pow(10, exponent);
    numerator = decimal * denominator;
    i = Math.min(Math.abs(denominator), Math.abs(numerator));
    while (i > 1) {
      if (denominator % i === 0 && numerator % i === 0) {
        denominator /= i;
        numerator /= i;
        break;
      }
      i--;
    }
    return [numerator, denominator];
  };

  yakubun = function(n, d) {
    var bd, bn, m, nd;

    bn = n;
    bd = d;
    m = Math.min(n, d);
    while (m > 1) {
      if (n % m === 0 && d % m === 0) {
        n /= m;
        d /= m;
        break;
      }
      m--;
    }
    if (bn !== n && bd !== d) {
      nd = yakubun(n, d);
      n = nd[0];
      d = nd[1];
    }
    return [n, d];
  };

  answers = [];

  i = 0;

  while (++i < 10) {
    n = 0;
    while (++n < 10) {
      if (i >= n) {
        continue;
      }
      x = i / n;
      j = 0;
      while (++j < 10) {
        l1 = +("" + j + i);
        r1 = +("" + j + n);
        l2 = +("" + i + j);
        r2 = +("" + n + j);
        patterns = [[l1, r1], [l1, r2], [l2, r1], [l2, r2]];
        for (_i = 0, _len = patterns.length; _i < _len; _i++) {
          pattern = patterns[_i];
          if (pattern[0] >= pattern[1]) {
            continue;
          }
          y = pattern[0] / pattern[1];
          if (y === x) {
            answers.push(x);
            break;
          }
        }
      }
    }
  }

  n = 1;

  d = 1;

  for (_j = 0, _len1 = answers.length; _j < _len1; _j++) {
    a = answers[_j];
    nd = decimal2fraction(a);
    n *= nd[0];
    d *= nd[1];
  }

  nd = yakubun(n, d);

  console.log(nd[1]);

}).call(this);
