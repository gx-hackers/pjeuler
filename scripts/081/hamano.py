#!/usr/bin/python

import sys
from ctypes import *
from platform import machine

#import resource
#stacksize = 80 * 1024 * 1024
#stacksize = 63 * 1024 * 1024 # OSX
#resource.setrlimit(resource.RLIMIT_STACK, (stacksize, stacksize))

obj = {}
obj['x86_64'] = [
# Compiling: gcc '-oprime64' '-march=core2' '-O0' '-g' '-mfpmath=sse' '-msse2' '-ffast-math' '-lm' 'prime.c'
# Dump: objdump -d  'prime64'
 0x55,                               # push   %rbp
 0x48,0x89,0xe5,                     # mov    %rsp,%rbp
 0x48,0x81,0xec,0xa8,0x63,0x00,0x00, # sub    $0x63a8,%rsp
 0x89,0xbd,0xec,0x9b,0xff,0xff,      # mov    %edi,-0x6414(%rbp)
 0x48,0x89,0xb5,0xe0,0x9b,0xff,0xff, # mov    %rsi,-0x6420(%rbp)
 0x48,0x8b,0x85,0xe0,0x9b,0xff,0xff, # mov    -0x6420(%rbp),%rax
 0x8b,0x00,                          # mov    (%rax),%eax
 0x89,0x85,0xf0,0x9b,0xff,0xff,      # mov    %eax,-0x6410(%rbp)
 0xc7,0x45,0xfc,0x01,0x00,0x00,0x00, # movl   $0x1,-0x4(%rbp)
 0xeb,0x3a,                          # jmp    400716 <p81+0x6a>
 0x8b,0x45,0xfc,                     # mov    -0x4(%rbp),%eax
 0x83,0xe8,0x01,                     # sub    $0x1,%eax
 0x48,0x98,                          # cltq   
 0x8b,0x94,0x85,0xf0,0x9b,0xff,0xff, # mov    -0x6410(%rbp,%rax,4),%edx
 0x8b,0x45,0xfc,                     # mov    -0x4(%rbp),%eax
 0x48,0x98,                          # cltq   
 0x48,0x8d,0x0c,0x85,0x00,0x00,0x00, # lea    0x0(,%rax,4),%rcx
 0x00,                               # 
 0x48,0x8b,0x85,0xe0,0x9b,0xff,0xff, # mov    -0x6420(%rbp),%rax
 0x48,0x01,0xc8,                     # add    %rcx,%rax
 0x8b,0x00,                          # mov    (%rax),%eax
 0x01,0xc2,                          # add    %eax,%edx
 0x8b,0x45,0xfc,                     # mov    -0x4(%rbp),%eax
 0x48,0x98,                          # cltq   
 0x89,0x94,0x85,0xf0,0x9b,0xff,0xff, # mov    %edx,-0x6410(%rbp,%rax,4)
 0x83,0x45,0xfc,0x01,                # addl   $0x1,-0x4(%rbp)
 0x8b,0x45,0xfc,                     # mov    -0x4(%rbp),%eax
 0x3b,0x85,0xec,0x9b,0xff,0xff,      # cmp    -0x6414(%rbp),%eax
 0x7c,0xbb,                          # jl     4006dc <p81+0x30>
 0xc7,0x45,0xf8,0x01,0x00,0x00,0x00, # movl   $0x1,-0x8(%rbp)
 0xe9,0x75,0x01,0x00,0x00,           # jmpq   4008a2 <p81+0x1f6>
 0x8b,0x85,0xec,0x9b,0xff,0xff,      # mov    -0x6414(%rbp),%eax
 0x89,0xc1,                          # mov    %eax,%ecx
 0x0f,0xaf,0x4d,0xf8,                # imul   -0x8(%rbp),%ecx
 0x8b,0x45,0xf8,                     # mov    -0x8(%rbp),%eax
 0x83,0xe8,0x01,                     # sub    $0x1,%eax
 0x0f,0xaf,0x85,0xec,0x9b,0xff,0xff, # imul   -0x6414(%rbp),%eax
 0x48,0x98,                          # cltq   
 0x8b,0x94,0x85,0xf0,0x9b,0xff,0xff, # mov    -0x6410(%rbp,%rax,4),%edx
 0x8b,0x85,0xec,0x9b,0xff,0xff,      # mov    -0x6414(%rbp),%eax
 0x0f,0xaf,0x45,0xf8,                # imul   -0x8(%rbp),%eax
 0x48,0x98,                          # cltq   
 0x48,0x8d,0x34,0x85,0x00,0x00,0x00, # lea    0x0(,%rax,4),%rsi
 0x00,                               # 
 0x48,0x8b,0x85,0xe0,0x9b,0xff,0xff, # mov    -0x6420(%rbp),%rax
 0x48,0x01,0xf0,                     # add    %rsi,%rax
 0x8b,0x00,                          # mov    (%rax),%eax
 0x01,0xc2,                          # add    %eax,%edx
 0x48,0x63,0xc1,                     # movslq %ecx,%rax
 0x89,0x94,0x85,0xf0,0x9b,0xff,0xff, # mov    %edx,-0x6410(%rbp,%rax,4)
 0xc7,0x45,0xfc,0x01,0x00,0x00,0x00, # movl   $0x1,-0x4(%rbp)
 0xe9,0x08,0x01,0x00,0x00,           # jmpq   40088f <p81+0x1e3>
 0x8b,0x45,0xf8,                     # mov    -0x8(%rbp),%eax
 0x83,0xe8,0x01,                     # sub    $0x1,%eax
 0x89,0xc2,                          # mov    %eax,%edx
 0x0f,0xaf,0x95,0xec,0x9b,0xff,0xff, # imul   -0x6414(%rbp),%edx
 0x8b,0x45,0xfc,                     # mov    -0x4(%rbp),%eax
 0x01,0xd0,                          # add    %edx,%eax
 0x48,0x98,                          # cltq   
 0x8b,0x94,0x85,0xf0,0x9b,0xff,0xff, # mov    -0x6410(%rbp,%rax,4),%edx
 0x8b,0x85,0xec,0x9b,0xff,0xff,      # mov    -0x6414(%rbp),%eax
 0x89,0xc1,                          # mov    %eax,%ecx
 0x0f,0xaf,0x4d,0xf8,                # imul   -0x8(%rbp),%ecx
 0x8b,0x45,0xfc,                     # mov    -0x4(%rbp),%eax
 0x01,0xc8,                          # add    %ecx,%eax
 0x83,0xe8,0x01,                     # sub    $0x1,%eax
 0x48,0x98,                          # cltq   
 0x8b,0x84,0x85,0xf0,0x9b,0xff,0xff, # mov    -0x6410(%rbp,%rax,4),%eax
 0x39,0xc2,                          # cmp    %eax,%edx
 0x7d,0x64,                          # jge    400829 <p81+0x17d>
 0x8b,0x85,0xec,0x9b,0xff,0xff,      # mov    -0x6414(%rbp),%eax
 0x89,0xc2,                          # mov    %eax,%edx
 0x0f,0xaf,0x55,0xf8,                # imul   -0x8(%rbp),%edx
 0x8b,0x45,0xfc,                     # mov    -0x4(%rbp),%eax
 0x8d,0x34,0x02,                     # lea    (%rdx,%rax,1),%esi
 0x8b,0x45,0xf8,                     # mov    -0x8(%rbp),%eax
 0x83,0xe8,0x01,                     # sub    $0x1,%eax
 0x89,0xc2,                          # mov    %eax,%edx
 0x0f,0xaf,0x95,0xec,0x9b,0xff,0xff, # imul   -0x6414(%rbp),%edx
 0x8b,0x45,0xfc,                     # mov    -0x4(%rbp),%eax
 0x01,0xd0,                          # add    %edx,%eax
 0x48,0x98,                          # cltq   
 0x8b,0x94,0x85,0xf0,0x9b,0xff,0xff, # mov    -0x6410(%rbp,%rax,4),%edx
 0x8b,0x85,0xec,0x9b,0xff,0xff,      # mov    -0x6414(%rbp),%eax
 0x89,0xc1,                          # mov    %eax,%ecx
 0x0f,0xaf,0x4d,0xf8,                # imul   -0x8(%rbp),%ecx
 0x8b,0x45,0xfc,                     # mov    -0x4(%rbp),%eax
 0x01,0xc8,                          # add    %ecx,%eax
 0x48,0x98,                          # cltq   
 0x48,0x8d,0x0c,0x85,0x00,0x00,0x00, # lea    0x0(,%rax,4),%rcx
 0x00,                               # 
 0x48,0x8b,0x85,0xe0,0x9b,0xff,0xff, # mov    -0x6420(%rbp),%rax
 0x48,0x01,0xc8,                     # add    %rcx,%rax
 0x8b,0x00,                          # mov    (%rax),%eax
 0x01,0xc2,                          # add    %eax,%edx
 0x48,0x63,0xc6,                     # movslq %esi,%rax
 0x89,0x94,0x85,0xf0,0x9b,0xff,0xff, # mov    %edx,-0x6410(%rbp,%rax,4)
 0xeb,0x62,                          # jmp    40088b <p81+0x1df>
 0x8b,0x85,0xec,0x9b,0xff,0xff,      # mov    -0x6414(%rbp),%eax
 0x89,0xc2,                          # mov    %eax,%edx
 0x0f,0xaf,0x55,0xf8,                # imul   -0x8(%rbp),%edx
 0x8b,0x45,0xfc,                     # mov    -0x4(%rbp),%eax
 0x8d,0x34,0x02,                     # lea    (%rdx,%rax,1),%esi
 0x8b,0x85,0xec,0x9b,0xff,0xff,      # mov    -0x6414(%rbp),%eax
 0x89,0xc2,                          # mov    %eax,%edx
 0x0f,0xaf,0x55,0xf8,                # imul   -0x8(%rbp),%edx
 0x8b,0x45,0xfc,                     # mov    -0x4(%rbp),%eax
 0x01,0xd0,                          # add    %edx,%eax
 0x83,0xe8,0x01,                     # sub    $0x1,%eax
 0x48,0x98,                          # cltq   
 0x8b,0x94,0x85,0xf0,0x9b,0xff,0xff, # mov    -0x6410(%rbp,%rax,4),%edx
 0x8b,0x85,0xec,0x9b,0xff,0xff,      # mov    -0x6414(%rbp),%eax
 0x89,0xc1,                          # mov    %eax,%ecx
 0x0f,0xaf,0x4d,0xf8,                # imul   -0x8(%rbp),%ecx
 0x8b,0x45,0xfc,                     # mov    -0x4(%rbp),%eax
 0x01,0xc8,                          # add    %ecx,%eax
 0x48,0x98,                          # cltq   
 0x48,0x8d,0x0c,0x85,0x00,0x00,0x00, # lea    0x0(,%rax,4),%rcx
 0x00,                               # 
 0x48,0x8b,0x85,0xe0,0x9b,0xff,0xff, # mov    -0x6420(%rbp),%rax
 0x48,0x01,0xc8,                     # add    %rcx,%rax
 0x8b,0x00,                          # mov    (%rax),%eax
 0x01,0xc2,                          # add    %eax,%edx
 0x48,0x63,0xc6,                     # movslq %esi,%rax
 0x89,0x94,0x85,0xf0,0x9b,0xff,0xff, # mov    %edx,-0x6410(%rbp,%rax,4)
 0x83,0x45,0xfc,0x01,                # addl   $0x1,-0x4(%rbp)
 0x8b,0x45,0xfc,                     # mov    -0x4(%rbp),%eax
 0x3b,0x85,0xec,0x9b,0xff,0xff,      # cmp    -0x6414(%rbp),%eax
 0x0f,0x8c,0xe9,0xfe,0xff,0xff,      # jl     400787 <p81+0xdb>
 0x83,0x45,0xf8,0x01,                # addl   $0x1,-0x8(%rbp)
 0x8b,0x45,0xf8,                     # mov    -0x8(%rbp),%eax
 0x3b,0x85,0xec,0x9b,0xff,0xff,      # cmp    -0x6414(%rbp),%eax
 0x0f,0x8c,0x7c,0xfe,0xff,0xff,      # jl     40072d <p81+0x81>
 0x8b,0x85,0xec,0x9b,0xff,0xff,      # mov    -0x6414(%rbp),%eax
 0x83,0xc0,0x01,                     # add    $0x1,%eax
 0x6b,0xc0,0x4f,                     # imul   $0x4f,%eax,%eax
 0x48,0x98,                          # cltq   
 0x8b,0x84,0x85,0xf0,0x9b,0xff,0xff, # mov    -0x6410(%rbp,%rax,4),%eax
 0xc9,                               # leaveq 
 0xc3,                               # retq   
# Count: 140
]

#from p81 import obj

code = create_string_buffer(''.join(map(chr, obj[machine()])))
addr = addressof(code)
ps = pythonapi.getpagesize()
size=(ps - 1) & addr + len(code)
if pythonapi.mprotect(addr&-ps, size, 7) < 0:
    print("mprotect error, addr=%#x" % (addr))
    exit()

import sys

mat=[]
sum=[]
for line in open('matrix.txt'):
    mat += map(int, line.split(','))

from struct import pack
p = create_string_buffer(''.join(map(lambda i: pack("i", i), mat)))
print(cast(code, CFUNCTYPE(c_int, c_int, c_void_p))(80, p))
