#!/usr/bin/python

from ctypes import *
from struct import pack

obj = [
 0x53,                               # push   %rbx
 0x48,0x81,0xec,0x88,0x63,0x00,0x00, # sub    $0x6388,%rsp
 0x8b,0x16,                          # mov    (%rsi),%edx
 0x83,0xff,0x01,                     # cmp    $0x1,%edi
 0x89,0x54,0x24,0x88,                # mov    %edx,-0x78(%rsp)
 0x0f,0x8e,0xab,0x00,0x00,0x00,      # jle    400732 <p81+0xc2>
 0x8d,0x47,0xfe,                     # lea    -0x2(%rdi),%eax
 0x48,0x8d,0x0c,0x85,0x04,0x00,0x00, # lea    0x4(,%rax,4),%rcx
 0x00,                               # 
 0x31,0xc0,                          # xor    %eax,%eax
 0x0f,0x1f,0x40,0x00,                # nopl   0x0(%rax)
 0x03,0x54,0x06,0x04,                # add    0x4(%rsi,%rax,1),%edx
 0x89,0x54,0x04,0x8c,                # mov    %edx,-0x74(%rsp,%rax,1)
 0x48,0x83,0xc0,0x04,                # add    $0x4,%rax
 0x48,0x39,0xc8,                     # cmp    %rcx,%rax
 0x75,0xef,                          # jne    400698 <p81+0x28>
 0x48,0x63,0xc7,                     # movslq %edi,%rax
 0x41,0x89,0xf9,                     # mov    %edi,%r9d
 0xbb,0x01,0x00,0x00,0x00,           # mov    $0x1,%ebx
 0x4c,0x8d,0x1c,0x85,0x00,0x00,0x00, # lea    0x0(,%rax,4),%r11
 0x00,                               # 
 0x4c,0x8d,0x54,0x86,0x04,           # lea    0x4(%rsi,%rax,4),%r10
 0x0f,0x1f,0x80,0x00,0x00,0x00,0x00, # nopl   0x0(%rax)
 0x44,0x89,0xc8,                     # mov    %r9d,%eax
 0x49,0x63,0xd1,                     # movslq %r9d,%rdx
 0x29,0xf8,                          # sub    %edi,%eax
 0x48,0x98,                          # cltq   
 0x8b,0x44,0x84,0x88,                # mov    -0x78(%rsp,%rax,4),%eax
 0x41,0x03,0x42,0xfc,                # add    -0x4(%r10),%eax
 0x89,0x44,0x94,0x88,                # mov    %eax,-0x78(%rsp,%rdx,4)
 0x41,0x8d,0x41,0x01,                # lea    0x1(%r9),%eax
 0x4c,0x89,0xd2,                     # mov    %r10,%rdx
 0x41,0x01,0xf9,                     # add    %edi,%r9d
 0xeb,0x1e,                          # jmp    400708 <p81+0x98>
 0x66,0x0f,0x1f,0x44,0x00,0x00,      # nopw   0x0(%rax,%rax,1)
 0x8b,0x0a,                          # mov    (%rdx),%ecx
 0x01,0xf1,                          # add    %esi,%ecx
 0x4c,0x63,0xc0,                     # movslq %eax,%r8
 0x83,0xc0,0x01,                     # add    $0x1,%eax
 0x48,0x83,0xc2,0x04,                # add    $0x4,%rdx
 0x44,0x39,0xc8,                     # cmp    %r9d,%eax
 0x42,0x89,0x4c,0x84,0x88,           # mov    %ecx,-0x78(%rsp,%r8,4)
 0x74,0x1d,                          # je     400725 <p81+0xb5>
 0x89,0xc1,                          # mov    %eax,%ecx
 0x29,0xf9,                          # sub    %edi,%ecx
 0x48,0x63,0xc9,                     # movslq %ecx,%rcx
 0x8b,0x74,0x8c,0x88,                # mov    -0x78(%rsp,%rcx,4),%esi
 0x8d,0x48,0xff,                     # lea    -0x1(%rax),%ecx
 0x48,0x63,0xc9,                     # movslq %ecx,%rcx
 0x8b,0x4c,0x8c,0x88,                # mov    -0x78(%rsp,%rcx,4),%ecx
 0x39,0xce,                          # cmp    %ecx,%esi
 0x7c,0xcf,                          # jl     4006f0 <p81+0x80>
 0x03,0x0a,                          # add    (%rdx),%ecx
 0xeb,0xcf,                          # jmp    4006f4 <p81+0x84>
 0x83,0xc3,0x01,                     # add    $0x1,%ebx
 0x4d,0x01,0xda,                     # add    %r11,%r10
 0x41,0x89,0xc1,                     # mov    %eax,%r9d
 0x39,0xfb,                          # cmp    %edi,%ebx
 0x75,0x96,                          # jne    4006c8 <p81+0x58>
 0x8b,0x84,0x24,0x84,0x63,0x00,0x00, # mov    0x6384(%rsp),%eax
 0x48,0x81,0xc4,0x88,0x63,0x00,0x00, # add    $0x6388,%rsp
 0x5b,                               # pop    %rbx
 0xc3,                               # retq   
 0x66,0x66,0x66,0x66,0x66,0x2e,0x0f, # data32 data32 data32 data32 nopw %cs:0x0(%rax,%rax,1)
 0x1f,0x84,0x00,0x00,0x00,0x00,0x00, # 
]

#from p81 import obj

code = create_string_buffer(''.join(map(chr, obj)))
addr = addressof(code)
ps = pythonapi.getpagesize()
size=(ps - 1) & addr + len(code)
if pythonapi.mprotect(addr&-ps, size, 7) < 0:
    print("mprotect error, addr=%#x" % (addr))
    exit()

mat=[]
n=0
for line in open('matrix.txt'):
    mat += map(int, line.split(','))
    n +=1

p = create_string_buffer(''.join(map(lambda i: pack("i", i), mat)))
print(cast(code, CFUNCTYPE(c_int, c_int, c_void_p))(n, p))
