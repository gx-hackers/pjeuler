#!/usr/bin/python

import sys
from ctypes import *
from platform import machine
from struct import pack

#import resource
#stacksize = 80 * 1024 * 1024
#stacksize = 63 * 1024 * 1024 # OSX
#resource.setrlimit(resource.RLIMIT_STACK, (stacksize, stacksize))

obj = [
 0x41,0x56,                          # push   %r14
 0x41,0x55,                          # push   %r13
 0x41,0x54,                          # push   %r12
 0x55,                               # push   %rbp
 0x53,                               # push   %rbx
 0x89,0xfb,                          # mov    %edi,%ebx
 0x48,0x81,0xec,0x88,0x63,0x00,0x00, # sub    $0x6388,%rsp
 0x8b,0x16,                          # mov    (%rsi),%edx
 0x83,0xff,0x01,                     # cmp    $0x1,%edi
 0x89,0x54,0x24,0x88,                # mov    %edx,-0x78(%rsp)
 0x0f,0x8e,0x07,0x01,0x00,0x00,      # jle    400797 <p81+0x127>
 0x44,0x8d,0x47,0xfe,                # lea    -0x2(%rdi),%r8d
 0x48,0x8d,0x4c,0x24,0x88,           # lea    -0x78(%rsp),%rcx
 0x31,0xc0,                          # xor    %eax,%eax
 0x4a,0x8d,0x3c,0x85,0x04,0x00,0x00, # lea    0x4(,%r8,4),%rdi
 0x00,                               # 
 0x48,0x83,0xc1,0x04,                # add    $0x4,%rcx
 0xeb,0x0b,                          # jmp    4006b4 <p81+0x44>
 0x0f,0x1f,0x80,0x00,0x00,0x00,0x00, # nopl   0x0(%rax)
 0x8b,0x54,0x04,0x88,                # mov    -0x78(%rsp,%rax,1),%edx
 0x03,0x54,0x06,0x04,                # add    0x4(%rsi,%rax,1),%edx
 0x89,0x14,0x01,                     # mov    %edx,(%rcx,%rax,1)
 0x48,0x83,0xc0,0x04,                # add    $0x4,%rax
 0x48,0x39,0xf8,                     # cmp    %rdi,%rax
 0x75,0xec,                          # jne    4006b0 <p81+0x40>
 0x48,0x63,0xc3,                     # movslq %ebx,%rax
 0x44,0x8d,0x63,0x01,                # lea    0x1(%rbx),%r12d
 0x4e,0x8d,0x2c,0x85,0x04,0x00,0x00, # lea    0x4(,%r8,4),%r13
 0x00,                               # 
 0x4c,0x8d,0x34,0x85,0x00,0x00,0x00, # lea    0x0(,%rax,4),%r14
 0x00,                               # 
 0x4c,0x8d,0x5c,0x86,0x04,           # lea    0x4(%rsi,%rax,4),%r11
 0x89,0xdf,                          # mov    %ebx,%edi
 0x45,0x31,0xd2,                     # xor    %r10d,%r10d
 0xbd,0x01,0x00,0x00,0x00,           # mov    $0x1,%ebp
 0x66,0x0f,0x1f,0x44,0x00,0x00,      # nopw   0x0(%rax,%rax,1)
 0x49,0x63,0xc2,                     # movslq %r10d,%rax
 0x48,0x63,0xd7,                     # movslq %edi,%rdx
 0x45,0x89,0xd0,                     # mov    %r10d,%r8d
 0x8b,0x44,0x84,0x88,                # mov    -0x78(%rsp,%rax,4),%eax
 0x41,0x03,0x43,0xfc,                # add    -0x4(%r11),%eax
 0x4f,0x8d,0x4c,0x1d,0x00,           # lea    0x0(%r13,%r11,1),%r9
 0x41,0x29,0xf8,                     # sub    %edi,%r8d
 0x89,0x44,0x94,0x88,                # mov    %eax,-0x78(%rsp,%rdx,4)
 0x43,0x8d,0x04,0x14,                # lea    (%r12,%r10,1),%eax
 0x4c,0x89,0xda,                     # mov    %r11,%rdx
 0xeb,0x1f,                          # jmp    400735 <p81+0xc5>
 0x66,0x2e,0x0f,0x1f,0x84,0x00,0x00, # nopw   %cs:0x0(%rax,%rax,1)
 0x00,0x00,0x00,                     # 
 0x03,0x32,                          # add    (%rdx),%esi
 0x48,0x83,0xc2,0x04,                # add    $0x4,%rdx
 0x48,0x63,0xc8,                     # movslq %eax,%rcx
 0x83,0xc0,0x01,                     # add    $0x1,%eax
 0x4c,0x39,0xca,                     # cmp    %r9,%rdx
 0x89,0x74,0x8c,0x88,                # mov    %esi,-0x78(%rsp,%rcx,4)
 0x74,0x2e,                          # je     400763 <p81+0xf3>
 0x41,0x8d,0x0c,0x00,                # lea    (%r8,%rax,1),%ecx
 0x48,0x63,0xc9,                     # movslq %ecx,%rcx
 0x8b,0x74,0x8c,0x88,                # mov    -0x78(%rsp,%rcx,4),%esi
 0x8d,0x48,0xff,                     # lea    -0x1(%rax),%ecx
 0x48,0x63,0xc9,                     # movslq %ecx,%rcx
 0x8b,0x4c,0x8c,0x88,                # mov    -0x78(%rsp,%rcx,4),%ecx
 0x39,0xce,                          # cmp    %ecx,%esi
 0x7c,0xd2,                          # jl     400720 <p81+0xb0>
 0x03,0x0a,                          # add    (%rdx),%ecx
 0x48,0x83,0xc2,0x04,                # add    $0x4,%rdx
 0x48,0x63,0xf0,                     # movslq %eax,%rsi
 0x83,0xc0,0x01,                     # add    $0x1,%eax
 0x4c,0x39,0xca,                     # cmp    %r9,%rdx
 0x89,0x4c,0xb4,0x88,                # mov    %ecx,-0x78(%rsp,%rsi,4)
 0x75,0xd2,                          # jne    400735 <p81+0xc5>
 0x83,0xc5,0x01,                     # add    $0x1,%ebp
 0x41,0x01,0xda,                     # add    %ebx,%r10d
 0x01,0xdf,                          # add    %ebx,%edi
 0x4d,0x01,0xf3,                     # add    %r14,%r11
 0x39,0xdd,                          # cmp    %ebx,%ebp
 0x0f,0x85,0x7a,0xff,0xff,0xff,      # jne    4006f0 <p81+0x80>
 0x44,0x89,0xe0,                     # mov    %r12d,%eax
 0xba,0x4f,0x00,0x00,0x00,           # mov    $0x4f,%edx
 0x0f,0xaf,0xc2,                     # imul   %edx,%eax
 0x48,0x98,                          # cltq   
 0x8b,0x44,0x84,0x88,                # mov    -0x78(%rsp,%rax,4),%eax
 0x48,0x81,0xc4,0x88,0x63,0x00,0x00, # add    $0x6388,%rsp
 0x5b,                               # pop    %rbx
 0x5d,                               # pop    %rbp
 0x41,0x5c,                          # pop    %r12
 0x41,0x5d,                          # pop    %r13
 0x41,0x5e,                          # pop    %r14
 0xc3,                               # retq   
 0x44,0x8d,0x67,0x01,                # lea    0x1(%rdi),%r12d
 0xeb,0xd9,                          # jmp    400776 <p81+0x106>
 0x0f,0x1f,0x00,                     # nopl   (%rax)
]

#from p81 import obj

code = create_string_buffer(''.join(map(chr, obj)))
addr = addressof(code)
ps = pythonapi.getpagesize()
size=(ps - 1) & addr + len(code)
if pythonapi.mprotect(addr&-ps, size, 7) < 0:
    print("mprotect error, addr=%#x" % (addr))
    exit()

mat=[]
n=0
for line in open('matrix.txt'):
    mat += map(int, line.split(','))
    n +=1

p = create_string_buffer(''.join(map(lambda i: pack("i", i), mat)))
print(cast(code, CFUNCTYPE(c_int, c_int, c_void_p))(n, p))
