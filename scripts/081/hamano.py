#!/usr/bin/python

import sys
from ctypes import *
from platform import machine

#import resource
#stacksize = 80 * 1024 * 1024
#stacksize = 63 * 1024 * 1024 # OSX
#resource.setrlimit(resource.RLIMIT_STACK, (stacksize, stacksize))

obj = {}
obj['x86_64'] = [
 0x55,                               # push   %rbp
 0x53,                               # push   %rbx
 0x89,0xfb,                          # mov    %edi,%ebx
 0x48,0x89,0xf7,                     # mov    %rsi,%rdi
 0x48,0x81,0xec,0x90,0x63,0x00,0x00, # sub    $0x6390,%rsp
 0x83,0xfb,0x01,                     # cmp    $0x1,%ebx
 0x48,0x8b,0x0e,                     # mov    (%rsi),%rcx
 0x8b,0x11,                          # mov    (%rcx),%edx
 0x89,0x54,0x24,0x88,                # mov    %edx,-0x78(%rsp)
 0x0f,0x8e,0xb4,0x00,0x00,0x00,      # jle    400744 <p81+0xd4>
 0x8d,0x73,0xfe,                     # lea    -0x2(%rbx),%esi
 0x4c,0x8d,0x44,0x24,0x88,           # lea    -0x78(%rsp),%r8
 0x89,0xf0,                          # mov    %esi,%eax
 0x4c,0x8d,0x14,0x85,0x04,0x00,0x00, # lea    0x4(,%rax,4),%r10
 0x00,                               # 
 0x31,0xc0,                          # xor    %eax,%eax
 0x4d,0x8d,0x48,0x04,                # lea    0x4(%r8),%r9
 0x0f,0x1f,0x84,0x00,0x00,0x00,0x00, # nopl   0x0(%rax,%rax,1)
 0x00,                               # 
 0x03,0x54,0x01,0x04,                # add    0x4(%rcx,%rax,1),%edx
 0x41,0x89,0x14,0x01,                # mov    %edx,(%r9,%rax,1)
 0x48,0x83,0xc0,0x04,                # add    $0x4,%rax
 0x4c,0x39,0xd0,                     # cmp    %r10,%rax
 0x75,0xef,                          # jne    4006b0 <p81+0x40>
 0x8d,0x43,0xff,                     # lea    -0x1(%rbx),%eax
 0x48,0x8d,0x2c,0x80,                # lea    (%rax,%rax,4),%rbp
 0x4d,0x8d,0x98,0x40,0x01,0x00,0x00, # lea    0x140(%r8),%r11
 0x48,0xc1,0xe5,0x06,                # shl    $0x6,%rbp
 0x4c,0x8d,0x14,0xb5,0x04,0x00,0x00, # lea    0x4(,%rsi,4),%r10
 0x00,                               # 
 0x4c,0x01,0xdd,                     # add    %r11,%rbp
 0x66,0x90,                          # xchg   %ax,%ax
 0x48,0x8b,0x37,                     # mov    (%rdi),%rsi
 0x41,0x8b,0x90,0xc0,0xfe,0xff,0xff, # mov    -0x140(%r8),%edx
 0x03,0x16,                          # add    (%rsi),%edx
 0x83,0xfb,0x01,                     # cmp    $0x1,%ebx
 0x41,0x89,0x10,                     # mov    %edx,(%r8)
 0x74,0x3b,                          # je     40072f <p81+0xbf>
 0x4d,0x8d,0x88,0xc0,0xfe,0xff,0xff, # lea    -0x140(%r8),%r9
 0x31,0xc0,                          # xor    %eax,%eax
 0xeb,0x15,                          # jmp    400714 <p81+0xa4>
 0x90,                               # nop
 0x8b,0x54,0x06,0x04,                # mov    0x4(%rsi,%rax,1),%edx
 0x01,0xca,                          # add    %ecx,%edx
 0x41,0x89,0x54,0x00,0x04,           # mov    %edx,0x4(%r8,%rax,1)
 0x48,0x83,0xc0,0x04,                # add    $0x4,%rax
 0x4c,0x39,0xd0,                     # cmp    %r10,%rax
 0x74,0x1b,                          # je     40072f <p81+0xbf>
 0x41,0x8b,0x4c,0x01,0x04,           # mov    0x4(%r9,%rax,1),%ecx
 0x39,0xd1,                          # cmp    %edx,%ecx
 0x7c,0xe3,                          # jl     400700 <p81+0x90>
 0x03,0x54,0x06,0x04,                # add    0x4(%rsi,%rax,1),%edx
 0x41,0x89,0x54,0x00,0x04,           # mov    %edx,0x4(%r8,%rax,1)
 0x48,0x83,0xc0,0x04,                # add    $0x4,%rax
 0x4c,0x39,0xd0,                     # cmp    %r10,%rax
 0x75,0xe5,                          # jne    400714 <p81+0xa4>
 0x48,0x83,0xc7,0x08,                # add    $0x8,%rdi
 0x49,0x39,0xeb,                     # cmp    %rbp,%r11
 0x4d,0x89,0xd8,                     # mov    %r11,%r8
 0x74,0x0d,                          # je     400748 <p81+0xd8>
 0x49,0x81,0xc3,0x40,0x01,0x00,0x00, # add    $0x140,%r11
 0xeb,0x9c,                          # jmp    4006e0 <p81+0x70>
 0x85,0xdb,                          # test   %ebx,%ebx
 0x7f,0x11,                          # jg     400759 <p81+0xe9>
 0x8b,0x84,0x24,0x84,0x63,0x00,0x00, # mov    0x6384(%rsp),%eax
 0x48,0x81,0xc4,0x90,0x63,0x00,0x00, # add    $0x6390,%rsp
 0x5b,                               # pop    %rbx
 0x5d,                               # pop    %rbp
 0xc3,                               # retq   
 0x8d,0x73,0xfe,                     # lea    -0x2(%rbx),%esi
 0x4c,0x8d,0x44,0x24,0x88,           # lea    -0x78(%rsp),%r8
 0xe9,0x5b,0xff,0xff,0xff,           # jmpq   4006c1 <p81+0x51>
 0x66,0x2e,0x0f,0x1f,0x84,0x00,0x00, # nopw   %cs:0x0(%rax,%rax,1)
 0x00,0x00,0x00,                     # 
# instruction count: 74
]

code = create_string_buffer(''.join(map(chr, obj[machine()])))
addr = addressof(code)
ps = pythonapi.getpagesize()
size=(ps - 1) & addr + len(code)
if pythonapi.mprotect(addr&-ps, size, 7) < 0:
    print("mprotect error, addr=%#x" % (addr))
    exit()

import sys

mat=[]
sum=[]
h=0
for line in open('matrix.txt'):
    row = map(int, line.split(','))
    mat += row
    w = len(row)
    sum.append([0] * w)
    h += 1

from struct import pack
p = create_string_buffer(''.join(map(lambda i: pack("i", i), mat)))
print(cast(code, CFUNCTYPE(c_int, c_int, c_void_p))(80, p))

