#!/usr/bin/python

import sys
from ctypes import *
from platform import machine
from struct import pack

#import resource
#stacksize = 80 * 1024 * 1024
#stacksize = 63 * 1024 * 1024 # OSX
#resource.setrlimit(resource.RLIMIT_STACK, (stacksize, stacksize))

obj = [
 0x41,0x56,                          # push   %r14
 0x41,0x55,                          # push   %r13
 0x41,0x54,                          # push   %r12
 0x55,                               # push   %rbp
 0x53,                               # push   %rbx
 0x48,0x81,0xec,0x88,0x63,0x00,0x00, # sub    $0x6388,%rsp
 0x89,0xfb,                          # mov    %edi,%ebx
 0x8b,0x06,                          # mov    (%rsi),%eax
 0x89,0x44,0x24,0x88,                # mov    %eax,-0x78(%rsp)
 0x83,0xff,0x01,                     # cmp    $0x1,%edi
 0x0f,0x8e,0xab,0x00,0x00,0x00,      # jle    40071a <p81+0xcb>
 0x89,0xfd,                          # mov    %edi,%ebp
 0x8d,0x47,0xfe,                     # lea    -0x2(%rdi),%eax
 0x48,0x8d,0x3c,0x85,0x04,0x00,0x00, # lea    0x4(,%rax,4),%rdi
 0x00,                               # 
 0xb8,0x00,0x00,0x00,0x00,           # mov    $0x0,%eax
 0x48,0x8d,0x4c,0x24,0x88,           # lea    -0x78(%rsp),%rcx
 0x48,0x83,0xc1,0x04,                # add    $0x4,%rcx
 0x8b,0x54,0x04,0x88,                # mov    -0x78(%rsp,%rax,1),%edx
 0x03,0x54,0x06,0x04,                # add    0x4(%rsi,%rax,1),%edx
 0x89,0x14,0x01,                     # mov    %edx,(%rcx,%rax,1)
 0x48,0x83,0xc0,0x04,                # add    $0x4,%rax
 0x48,0x39,0xf8,                     # cmp    %rdi,%rax
 0x75,0xec,                          # jne    40068a <p81+0x3b>
 0x41,0x89,0xde,                     # mov    %ebx,%r14d
 0x44,0x8d,0x2c,0x1b,                # lea    (%rbx,%rbx,1),%r13d
 0x41,0x89,0xdb,                     # mov    %ebx,%r11d
 0x41,0xba,0x00,0x00,0x00,0x00,      # mov    $0x0,%r10d
 0xbf,0x01,0x00,0x00,0x00,           # mov    $0x1,%edi
 0x44,0x8d,0x65,0x01,                # lea    0x1(%rbp),%r12d
 0x49,0x63,0xc3,                     # movslq %r11d,%rax
 0x49,0x63,0xd2,                     # movslq %r10d,%rdx
 0x8b,0x54,0x94,0x88,                # mov    -0x78(%rsp,%rdx,4),%edx
 0x03,0x14,0x86,                     # add    (%rsi,%rax,4),%edx
 0x89,0x54,0x84,0x88,                # mov    %edx,-0x78(%rsp,%rax,4)
 0x43,0x8d,0x04,0x14,                # lea    (%r12,%r10,1),%eax
 0x47,0x8d,0x0c,0x2a,                # lea    (%r10,%r13,1),%r9d
 0x45,0x89,0xd0,                     # mov    %r10d,%r8d
 0x45,0x29,0xd8,                     # sub    %r11d,%r8d
 0x41,0x8d,0x14,0x00,                # lea    (%r8,%rax,1),%edx
 0x48,0x63,0xd2,                     # movslq %edx,%rdx
 0x8b,0x4c,0x94,0x88,                # mov    -0x78(%rsp,%rdx,4),%ecx
 0x8d,0x50,0xff,                     # lea    -0x1(%rax),%edx
 0x48,0x63,0xd2,                     # movslq %edx,%rdx
 0x8b,0x54,0x94,0x88,                # mov    -0x78(%rsp,%rdx,4),%edx
 0x39,0xd1,                          # cmp    %edx,%ecx
 0x7d,0x0c,                          # jge    4006fb <p81+0xac>
 0x48,0x63,0xd0,                     # movslq %eax,%rdx
 0x03,0x0c,0x96,                     # add    (%rsi,%rdx,4),%ecx
 0x89,0x4c,0x94,0x88,                # mov    %ecx,-0x78(%rsp,%rdx,4)
 0xeb,0x0a,                          # jmp    400705 <p81+0xb6>
 0x48,0x63,0xc8,                     # movslq %eax,%rcx
 0x03,0x14,0x8e,                     # add    (%rsi,%rcx,4),%edx
 0x89,0x54,0x8c,0x88,                # mov    %edx,-0x78(%rsp,%rcx,4)
 0x83,0xc0,0x01,                     # add    $0x1,%eax
 0x44,0x39,0xc8,                     # cmp    %r9d,%eax
 0x75,0xc9,                          # jne    4006d6 <p81+0x87>
 0x83,0xc7,0x01,                     # add    $0x1,%edi
 0x41,0x01,0xea,                     # add    %ebp,%r10d
 0x45,0x01,0xf3,                     # add    %r14d,%r11d
 0x39,0xdf,                          # cmp    %ebx,%edi
 0x75,0x9d,                          # jne    4006b7 <p81+0x68>
 0x8d,0x43,0x01,                     # lea    0x1(%rbx),%eax
 0x6b,0xc0,0x4f,                     # imul   $0x4f,%eax,%eax
 0x48,0x98,                          # cltq   
 0x8b,0x44,0x84,0x88,                # mov    -0x78(%rsp,%rax,4),%eax
 0x48,0x81,0xc4,0x88,0x63,0x00,0x00, # add    $0x6388,%rsp
 0x5b,                               # pop    %rbx
 0x5d,                               # pop    %rbp
 0x41,0x5c,                          # pop    %r12
 0x41,0x5d,                          # pop    %r13
 0x41,0x5e,                          # pop    %r14
 0xc3,                               # retq   
]

#from p81 import obj

code = create_string_buffer(''.join(map(chr, obj)))
addr = addressof(code)
ps = pythonapi.getpagesize()
size=(ps - 1) & addr + len(code)
if pythonapi.mprotect(addr&-ps, size, 7) < 0:
    print("mprotect error, addr=%#x" % (addr))
    exit()

mat=[]
n=0
for line in open('matrix.txt'):
    mat += map(int, line.split(','))
    n +=1

p = create_string_buffer(''.join(map(lambda i: pack("i", i), mat)))
print(cast(code, CFUNCTYPE(c_int, c_int, c_void_p))(n, p))
